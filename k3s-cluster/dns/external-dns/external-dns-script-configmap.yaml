apiVersion: v1
kind: ConfigMap
metadata:
  name: external-dns-script
  namespace: kube-system
data:
  update-dns.sh: |
    #!/bin/sh
    
    ZONE_FILE="/etc/coredns/shared/k8s.local.db"
    TEMP_FILE="/tmp/k8s.local.db.tmp"
    
    # Initialize zone file if it doesn't exist
    if [ ! -f "${ZONE_FILE}" ]; then
      echo "Creating initial zone file..."
      cat > "${ZONE_FILE}" << EOL
    $ORIGIN k8s.local.
    $TTL 300
    @ IN SOA k8s.local. hostmaster.k8s.local. 1 300 300 300 300
    @ IN NS ns1.k8s.local.
    ns1 IN A 10.43.0.10
    EOL
    fi
    
    echo "Watching for Kubernetes services with external-dns.alpha.kubernetes.io/hostname annotation..."
    
    while true; do
      # Get services with the hostname annotation
      kubectl get services --all-namespaces -o json | jq -r '.items[] | select(.metadata.annotations["external-dns.alpha.kubernetes.io/hostname"]) | select(.status.loadBalancer.ingress != null) | .metadata.annotations["external-dns.alpha.kubernetes.io/hostname"] + " " + (.status.loadBalancer.ingress[0].ip // "")' | while read HOSTNAME IP; do
        if [ -n "${IP}" ] && [[ "${HOSTNAME}" == *"k8s.local"* ]]; then
          echo "Found ${HOSTNAME} -> ${IP}"
          
          # Copy header from existing zone file
          grep -v " IN A " "${ZONE_FILE}" > "${TEMP_FILE}" || true
          
          # Add all existing A records except the one we're updating
          grep " IN A " "${ZONE_FILE}" | grep -v "${HOSTNAME}" >> "${TEMP_FILE}" || true
          
          # Add or update the record
          echo "${HOSTNAME} IN A ${IP}" >> "${TEMP_FILE}"
          
          # Replace zone file if changed
          if ! diff -q "${ZONE_FILE}" "${TEMP_FILE}" > /dev/null 2>&1; then
            cp "${TEMP_FILE}" "${ZONE_FILE}"
            echo "Zone file updated at $(date)"
          fi
        fi
      done
      
      # Sleep for 30 seconds
      sleep 30
    done
