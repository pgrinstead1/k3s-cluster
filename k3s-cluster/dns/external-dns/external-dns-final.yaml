apiVersion: v1
kind: ConfigMap
metadata:
  name: external-dns-script
  namespace: kube-system
data:
  update-dns.sh: |
    #!/bin/sh
    set -e
    
    ZONE_FILE="/etc/coredns/shared/k8s.local.db"
    TEMP_FILE="/tmp/k8s.local.db.tmp"
    LOCK_FILE="/tmp/k8s.local.lock"
    DOMAIN="k8s.local"
    INTERVAL="30"
    
    # Check for root permissions
    if [ "1000" != "0" ]; then
      echo "This script must be run as root to modify zone files"
      exit 1
    fi
    
    # Function to acquire a lock
    acquire_lock() {
      while [ -f "" ]; do
        echo "Waiting for lock to be released..."
        sleep 1
      done
      touch ""
    }
    
    # Function to release the lock
    release_lock() {
      rm -f ""
    }
    
    # Initialize zone file if it doesn't exist
    if [ ! -f "${ZONE_FILE}" ]; then
      echo "Creating initial zone file..."
      acquire_lock
      cat > "${ZONE_FILE}" << EOL
    $ORIGIN .
    $TTL 300
    @ IN SOA . hostmaster.. 1 300 300 300 300
    @ IN NS ns1..
    ns1 IN A 10.43.0.10
    EOL
      release_lock
    fi
    
    echo "Starting DNS record synchronization for Kubernetes services with domain "
    echo "Zone file: "
    echo "Update interval:  seconds"
    
    # Main loop
    while true; do
      echo "Scanning for services with external-dns.alpha.kubernetes.io/hostname annotation..."
      
      # Get services with the hostname annotation that match our domain
      SERVICE_COUNT=0
      
      # Create a temporary file for the new zone file
      echo "$ORIGIN ." > "${TEMP_FILE}"
      echo "$TTL 300" >> "${TEMP_FILE}"
      echo "@ IN SOA . hostmaster.. 1741556081 300 300 300 300" >> "${TEMP_FILE}"
      echo "@ IN NS ns1.." >> "${TEMP_FILE}"
      echo "ns1 IN A 10.43.0.10" >> "${TEMP_FILE}"
      
      # Get all services with hostname annotation and a LoadBalancer IP
      kubectl get services --all-namespaces -o json | jq -r '.items[] | select(.metadata.annotations["external-dns.alpha.kubernetes.io/hostname"]) | select(.status.loadBalancer.ingress != null) | .metadata.annotations["external-dns.alpha.kubernetes.io/hostname"] + " " + (.status.loadBalancer.ingress[0].ip // "")' | while read HOSTNAME IP; do
        if [ -n "${IP}" ] && [ "$(echo ${HOSTNAME} | grep )" != "" ]; then
          # Extract just the hostname part (without the domain)
          SHORTNAME=$(echo ${HOSTNAME} | sed "s/\.$//")
          
          echo "Found ${HOSTNAME} -> ${IP} (shortname: ${SHORTNAME})"
          echo "${SHORTNAME} IN A ${IP}" >> "${TEMP_FILE}"
          SERVICE_COUNT=$((SERVICE_COUNT+1))
        fi
      done
      
      # Also get ingress resources with hostname annotation
      kubectl get ingress --all-namespaces -o json | jq -r '.items[] | select(.metadata.annotations["external-dns.alpha.kubernetes.io/hostname"]) | select(.status.loadBalancer.ingress != null) | .metadata.annotations["external-dns.alpha.kubernetes.io/hostname"] + " " + (.status.loadBalancer.ingress[0].ip // "")' | while read HOSTNAME IP; do
        if [ -n "${IP}" ] && [ "$(echo ${HOSTNAME} | grep )" != "" ]; then
          # Extract just the hostname part (without the domain)
          SHORTNAME=$(echo ${HOSTNAME} | sed "s/\.$//")
          
          echo "Found ingress ${HOSTNAME} -> ${IP} (shortname: ${SHORTNAME})"
          echo "${SHORTNAME} IN A ${IP}" >> "${TEMP_FILE}"
          SERVICE_COUNT=$((SERVICE_COUNT+1))
        fi
      done
      
      echo "Found ${SERVICE_COUNT} services/ingresses with  hostnames"
      
      # Replace zone file if changed
      acquire_lock
      if ! diff -q "${ZONE_FILE}" "${TEMP_FILE}" > /dev/null 2>&1; then
        cp "${TEMP_FILE}" "${ZONE_FILE}"
        echo "Zone file updated at $(date)"
        echo "New zone file contents:"
        cat "${ZONE_FILE}"
      else
        echo "No changes to zone file needed"
      fi
      release_lock
      
      # Sleep for the specified interval
      echo "Sleeping for  seconds..."
      sleep 
    done
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-dns-sync
  namespace: kube-system
  labels:
    app: k8s-dns-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-dns-sync
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: k8s-dns-sync
    spec:
      serviceAccountName: external-dns
      containers:
      - name: dns-sync
        image: bitnami/kubectl:latest
        command: ["/bin/sh"]
        args: ["-c", "cp /scripts/update-dns.sh /tmp/ && chmod +x /tmp/update-dns.sh && /tmp/update-dns.sh"]
        resources:
          limits:
            cpu: "100m"
            memory: "128Mi"
          requests:
            cpu: "50m"
            memory: "64Mi"
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: coredns-zone
          mountPath: /etc/coredns/shared
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        livenessProbe:
          exec:
            command:
            - pgrep
            - -f
            - update-dns.sh
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: scripts
        configMap:
          name: external-dns-script
      - name: coredns-zone
        persistentVolumeClaim:
          claimName: coredns-zone-pvc
      securityContext:
        fsGroup: 65534
